// Package bonsai provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package bonsai

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Groth16Seal Snark Seal object
//
// raw SNARK seal / proof data and outputs from snarkjs [soliditycalldata](https://github.com/iden3/snarkjs#26-simulate-a-verification-call)
type Groth16Seal struct {
	// A Proof 'a' value
	A []openapi_types.File `json:"a"`

	// B Proof 'b' value
	B [][]openapi_types.File `json:"b"`

	// C Proof 'c' value
	C []openapi_types.File `json:"c"`

	// Public Proof public outputs
	Public []openapi_types.File `json:"public"`
}

// ImageUpload upload endpoint responses containing upload URLs
type ImageUpload struct {
	// Url Pre-Signed URL that accepts PUT requests to upload files
	Url string `json:"url"`
}

// InputUpload upload endpoint responses containing upload URLs and UUID
type InputUpload struct {
	// Url Pre-Signed URL that accepts PUT requests to upload files
	Url string `json:"url"`

	// Uuid UUID representing the uploaded object
	Uuid string `json:"uuid"`
}

// Quotas User quota and usage fields
type Quotas struct {
	// ConcurrentProofs Max concurrent proofs
	ConcurrentProofs int64 `json:"concurrent_proofs"`

	// CycleBudget Current cycle budget remaining
	CycleBudget int64 `json:"cycle_budget"`

	// CycleUsage Lifetime cycles used
	CycleUsage int64 `json:"cycle_usage"`

	// ExecCycleLimit Executor cycle limit, in millions of cycles
	ExecCycleLimit int64 `json:"exec_cycle_limit"`

	// MaxParallelism Max parallel proving units
	MaxParallelism int64 `json:"max_parallelism"`
}

// RestError REST api error classes
type RestError struct {
	union json.RawMessage
}

// RestError0 defines model for .
type RestError0 struct {
	// ServerErr Failed due to a server side error
	ServerErr string `json:"ServerErr"`
}

// SessionCreate Arguments to create a new proving session
type SessionCreate struct {
	// Img uploaded ImageId
	Img string `json:"img"`

	// Input Input UUID for uploaded input
	Input string `json:"input"`
}

// SessionCreateResponse Session creation response
type SessionCreateResponse struct {
	// Uuid Generated UUID for the session
	Uuid string `json:"uuid"`
}

// SessionStatus Proving session status information
type SessionStatus struct {
	// ErrorMsg If the status is FAILED, this is the error message from the workflow
	ErrorMsg *string `json:"error_msg"`

	// ReceiptUrl URL to download (http GET) the receipt
	ReceiptUrl *string `json:"receipt_url"`

	// State Last reported active state that the execution was in.
	State *string `json:"state"`

	// Status Proving workflow status
	//
	// Potential values: [RUNNING | SUCCEEDED | FAILED | TIMED_OUT | ABORTED]
	Status string `json:"status"`
}

// SnarkCreate STARK to SNARK conversion input data
type SnarkCreate struct {
	// SessionId Proof Session UUID
	SessionId string `json:"session_id"`
}

// SnarkCreateResponse Snark proof session creation response
type SnarkCreateResponse struct {
	// Uuid Snark Session UUID
	Uuid string `json:"uuid"`
}

// SnarkReceipt Snark Receipt object
//
// All relevant data to verify both the snark proof an corresponding imageId on
// chain.
type SnarkReceipt struct {
	// Journal Journal data from the risc-zkvm Receipt object
	Journal openapi_types.File `json:"journal"`

	// PostStateDigest Post State Digest
	//
	// Collected from the STARK proof via
	// `receipt.get_metadata().post.digest()`
	PostStateDigest openapi_types.File `json:"post_state_digest"`

	// Snark Snark Seal object
	//
	// raw SNARK seal / proof data and outputs from snarkjs [soliditycalldata](https://github.com/iden3/snarkjs#26-simulate-a-verification-call)
	Snark Groth16Seal `json:"snark"`
}

// SnarkStatus SNARK proving session status
type SnarkStatus struct {
	Output *SnarkReceipt `json:"output"`

	// Status SNARK proving workflow status
	//
	// Potential values: [RUNNING | SUCCEEDED | FAILED | TIMED_OUT | ABORTED]
	Status string `json:"status"`
}

// VersionInfo Response containing all the supported components respective versions
type VersionInfo struct {
	// Risc0Zkvm Supported versions of the zkvm
	Risc0Zkvm []string `json:"risc0_zkvm"`
}

// RouteSessionCreateJSONRequestBody defines body for RouteSessionCreate for application/json ContentType.
type RouteSessionCreateJSONRequestBody = SessionCreate

// RouteSnarkCreateJSONRequestBody defines body for RouteSnarkCreate for application/json ContentType.
type RouteSnarkCreateJSONRequestBody = SnarkCreate

// AsRestError0 returns the union data inside the RestError as a RestError0
func (t RestError) AsRestError0() (RestError0, error) {
	var body RestError0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRestError0 overwrites any union data inside the RestError as the provided RestError0
func (t *RestError) FromRestError0(v RestError0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRestError0 performs a merge with any union data inside the RestError, using the provided RestError0
func (t *RestError) MergeRestError0(v RestError0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RestError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RestError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RouteImageUpload request
	RouteImageUpload(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteInputUpload request
	RouteInputUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteSessionCreateWithBody request with any body
	RouteSessionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RouteSessionCreate(ctx context.Context, body RouteSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteSessionLogs request
	RouteSessionLogs(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteSessionStatus request
	RouteSessionStatus(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteSnarkCreateWithBody request with any body
	RouteSnarkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RouteSnarkCreate(ctx context.Context, body RouteSnarkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteSnarkStatus request
	RouteSnarkStatus(ctx context.Context, snarkUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteUserQuota request
	RouteUserQuota(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RouteVersionData request
	RouteVersionData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RouteImageUpload(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteImageUploadRequest(c.Server, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteInputUpload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteInputUploadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteSessionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteSessionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteSessionCreate(ctx context.Context, body RouteSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteSessionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteSessionLogs(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteSessionLogsRequest(c.Server, sessionUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteSessionStatus(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteSessionStatusRequest(c.Server, sessionUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteSnarkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteSnarkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteSnarkCreate(ctx context.Context, body RouteSnarkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteSnarkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteSnarkStatus(ctx context.Context, snarkUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteSnarkStatusRequest(c.Server, snarkUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteUserQuota(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteUserQuotaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RouteVersionData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRouteVersionDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRouteImageUploadRequest generates requests for RouteImageUpload
func NewRouteImageUploadRequest(server string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_id", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/upload/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRouteInputUploadRequest generates requests for RouteInputUpload
func NewRouteInputUploadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inputs/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRouteSessionCreateRequest calls the generic RouteSessionCreate builder with application/json body
func NewRouteSessionCreateRequest(server string, body RouteSessionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRouteSessionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRouteSessionCreateRequestWithBody generates requests for RouteSessionCreate with any type of body
func NewRouteSessionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRouteSessionLogsRequest generates requests for RouteSessionLogs
func NewRouteSessionLogsRequest(server string, sessionUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_uuid", runtime.ParamLocationPath, sessionUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRouteSessionStatusRequest generates requests for RouteSessionStatus
func NewRouteSessionStatusRequest(server string, sessionUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_uuid", runtime.ParamLocationPath, sessionUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRouteSnarkCreateRequest calls the generic RouteSnarkCreate builder with application/json body
func NewRouteSnarkCreateRequest(server string, body RouteSnarkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRouteSnarkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRouteSnarkCreateRequestWithBody generates requests for RouteSnarkCreate with any type of body
func NewRouteSnarkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snark/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRouteSnarkStatusRequest generates requests for RouteSnarkStatus
func NewRouteSnarkStatusRequest(server string, snarkUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snark_uuid", runtime.ParamLocationPath, snarkUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snark/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRouteUserQuotaRequest generates requests for RouteUserQuota
func NewRouteUserQuotaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/quotas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRouteVersionDataRequest generates requests for RouteVersionData
func NewRouteVersionDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RouteImageUploadWithResponse request
	RouteImageUploadWithResponse(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*RouteImageUploadResponse, error)

	// RouteInputUploadWithResponse request
	RouteInputUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RouteInputUploadResponse, error)

	// RouteSessionCreateWithBodyWithResponse request with any body
	RouteSessionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RouteSessionCreateResponse, error)

	RouteSessionCreateWithResponse(ctx context.Context, body RouteSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RouteSessionCreateResponse, error)

	// RouteSessionLogsWithResponse request
	RouteSessionLogsWithResponse(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*RouteSessionLogsResponse, error)

	// RouteSessionStatusWithResponse request
	RouteSessionStatusWithResponse(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*RouteSessionStatusResponse, error)

	// RouteSnarkCreateWithBodyWithResponse request with any body
	RouteSnarkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RouteSnarkCreateResponse, error)

	RouteSnarkCreateWithResponse(ctx context.Context, body RouteSnarkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RouteSnarkCreateResponse, error)

	// RouteSnarkStatusWithResponse request
	RouteSnarkStatusWithResponse(ctx context.Context, snarkUuid string, reqEditors ...RequestEditorFn) (*RouteSnarkStatusResponse, error)

	// RouteUserQuotaWithResponse request
	RouteUserQuotaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RouteUserQuotaResponse, error)

	// RouteVersionDataWithResponse request
	RouteVersionDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RouteVersionDataResponse, error)
}

type RouteImageUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageUpload
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteImageUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteImageUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteInputUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InputUpload
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteInputUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteInputUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteSessionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionCreateResponse
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteSessionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteSessionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteSessionLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteSessionLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteSessionLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteSessionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionStatus
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteSessionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteSessionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteSnarkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnarkCreateResponse
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteSnarkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteSnarkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteSnarkStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnarkStatus
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteSnarkStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteSnarkStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteUserQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Quotas
	JSON500      *RestError
}

// Status returns HTTPResponse.Status
func (r RouteUserQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteUserQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RouteVersionDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionInfo
}

// Status returns HTTPResponse.Status
func (r RouteVersionDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RouteVersionDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RouteImageUploadWithResponse request returning *RouteImageUploadResponse
func (c *ClientWithResponses) RouteImageUploadWithResponse(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*RouteImageUploadResponse, error) {
	rsp, err := c.RouteImageUpload(ctx, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteImageUploadResponse(rsp)
}

// RouteInputUploadWithResponse request returning *RouteInputUploadResponse
func (c *ClientWithResponses) RouteInputUploadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RouteInputUploadResponse, error) {
	rsp, err := c.RouteInputUpload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteInputUploadResponse(rsp)
}

// RouteSessionCreateWithBodyWithResponse request with arbitrary body returning *RouteSessionCreateResponse
func (c *ClientWithResponses) RouteSessionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RouteSessionCreateResponse, error) {
	rsp, err := c.RouteSessionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteSessionCreateResponse(rsp)
}

func (c *ClientWithResponses) RouteSessionCreateWithResponse(ctx context.Context, body RouteSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RouteSessionCreateResponse, error) {
	rsp, err := c.RouteSessionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteSessionCreateResponse(rsp)
}

// RouteSessionLogsWithResponse request returning *RouteSessionLogsResponse
func (c *ClientWithResponses) RouteSessionLogsWithResponse(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*RouteSessionLogsResponse, error) {
	rsp, err := c.RouteSessionLogs(ctx, sessionUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteSessionLogsResponse(rsp)
}

// RouteSessionStatusWithResponse request returning *RouteSessionStatusResponse
func (c *ClientWithResponses) RouteSessionStatusWithResponse(ctx context.Context, sessionUuid string, reqEditors ...RequestEditorFn) (*RouteSessionStatusResponse, error) {
	rsp, err := c.RouteSessionStatus(ctx, sessionUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteSessionStatusResponse(rsp)
}

// RouteSnarkCreateWithBodyWithResponse request with arbitrary body returning *RouteSnarkCreateResponse
func (c *ClientWithResponses) RouteSnarkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RouteSnarkCreateResponse, error) {
	rsp, err := c.RouteSnarkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteSnarkCreateResponse(rsp)
}

func (c *ClientWithResponses) RouteSnarkCreateWithResponse(ctx context.Context, body RouteSnarkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RouteSnarkCreateResponse, error) {
	rsp, err := c.RouteSnarkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteSnarkCreateResponse(rsp)
}

// RouteSnarkStatusWithResponse request returning *RouteSnarkStatusResponse
func (c *ClientWithResponses) RouteSnarkStatusWithResponse(ctx context.Context, snarkUuid string, reqEditors ...RequestEditorFn) (*RouteSnarkStatusResponse, error) {
	rsp, err := c.RouteSnarkStatus(ctx, snarkUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteSnarkStatusResponse(rsp)
}

// RouteUserQuotaWithResponse request returning *RouteUserQuotaResponse
func (c *ClientWithResponses) RouteUserQuotaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RouteUserQuotaResponse, error) {
	rsp, err := c.RouteUserQuota(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteUserQuotaResponse(rsp)
}

// RouteVersionDataWithResponse request returning *RouteVersionDataResponse
func (c *ClientWithResponses) RouteVersionDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RouteVersionDataResponse, error) {
	rsp, err := c.RouteVersionData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRouteVersionDataResponse(rsp)
}

// ParseRouteImageUploadResponse parses an HTTP response from a RouteImageUploadWithResponse call
func ParseRouteImageUploadResponse(rsp *http.Response) (*RouteImageUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteImageUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageUpload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteInputUploadResponse parses an HTTP response from a RouteInputUploadWithResponse call
func ParseRouteInputUploadResponse(rsp *http.Response) (*RouteInputUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteInputUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InputUpload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteSessionCreateResponse parses an HTTP response from a RouteSessionCreateWithResponse call
func ParseRouteSessionCreateResponse(rsp *http.Response) (*RouteSessionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteSessionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteSessionLogsResponse parses an HTTP response from a RouteSessionLogsWithResponse call
func ParseRouteSessionLogsResponse(rsp *http.Response) (*RouteSessionLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteSessionLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteSessionStatusResponse parses an HTTP response from a RouteSessionStatusWithResponse call
func ParseRouteSessionStatusResponse(rsp *http.Response) (*RouteSessionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteSessionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteSnarkCreateResponse parses an HTTP response from a RouteSnarkCreateWithResponse call
func ParseRouteSnarkCreateResponse(rsp *http.Response) (*RouteSnarkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteSnarkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnarkCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteSnarkStatusResponse parses an HTTP response from a RouteSnarkStatusWithResponse call
func ParseRouteSnarkStatusResponse(rsp *http.Response) (*RouteSnarkStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteSnarkStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnarkStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteUserQuotaResponse parses an HTTP response from a RouteUserQuotaWithResponse call
func ParseRouteUserQuotaResponse(rsp *http.Response) (*RouteUserQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteUserQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Quotas
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest RestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRouteVersionDataResponse parses an HTTP response from a RouteVersionDataWithResponse call
func ParseRouteVersionDataResponse(rsp *http.Response) (*RouteVersionDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RouteVersionDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
