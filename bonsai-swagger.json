{"openapi":"3.0.3","info":{"title":"Bonsai Proving Service","description":"\nProver as a REST service api, for the risczero zkvm.\n\nSample client SDK for this API can be found at: [bonsai-sdk](https://crates.io/crates/bonsai-sdk)","license":{"name":""},"version":"0.0.1"},"paths":{"/images/upload/{image_id}":{"get":{"tags":["images"],"summary":"Fetch upload URL for zkvm elf or memory_img","description":"Fetch upload URL for zkvm elf or memory_img\n\nCreates a pre-signed upload (http PUT) url for uploading a new memory image\nor elf file.\n\nExample rust code to prepare the inputs:\n\n```rust\nuse risc0_zkvm::{Program, MemoryImage, MEM_SIZE, PAGE_SIZE};\n\nlet program = Program::load_elf(METHOD_NAME_ELF, MEM_SIZE as u32)?;\nlet image = MemoryImage::new(&program, PAGE_SIZE as u32)?;\nlet image_id = hex::encode(image.compute_id());\nlet image = bincode::serialize(&image).expect(\"Failed to serialize memory img\");\n(image, image_id)\n```","operationId":"route_image_upload","parameters":[{"name":"image_id","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Location to PUT a elf or memory_img","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageUpload"}}}},"204":{"description":"Supplied image_id already exists in bonsai"},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/inputs/upload":{"get":{"tags":["inputs"],"summary":"Fetch upload URL for zkvm guest input","description":"Fetch upload URL for zkvm guest input\n\nCreates a presigned URL to upload (http PUT) the zkvm guest input binary\ndata. The input data must be encoded with [to_vec]() and supplied as a byte\nbuffer.\n\nExample rust code:\n```rust\nlet input_data = risc0_zkvm::serde::to_vec(&input_data).unwrap();\nlet input_data = bytemuck::cast_slice(&input_data).to_vec();\n```","operationId":"route_input_upload","responses":{"200":{"description":"Location to upload (http PUT) the input and a UUID of the input object","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InputUpload"}}}},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/sessions/create":{"post":{"tags":["sessions"],"summary":"Start a proving session","description":"Start a proving session\n\nCombines input and image ids and starts a risc zero proving + recursion\nsession. Returns a session ID to reference for status checks, or\nstark->snark conversion.","operationId":"route_session_create","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SessionCreate"}}},"required":true},"responses":{"200":{"description":"Newly created session identifier","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SessionCreateResponse"}}}},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/sessions/logs/{session_uuid}":{"get":{"tags":["sessions"],"summary":"Get the guest logs of an existing proving session","description":"Get the guest logs of an existing proving session\n\nLookup for the logs generated for a specific session id. If found,\nreturn the contents of the log file.","operationId":"route_session_logs","parameters":[{"name":"session_uuid","in":"path","description":"Session UUID","required":true,"schema":{"type":"string"}}],"responses":{"303":{"description":"Redirects to the GET location to download the logs from","headers":{"Location":{"schema":{"type":"string"},"description":"Presigned URL to download guest logs"}}},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/sessions/status/{session_uuid}":{"get":{"tags":["sessions"],"summary":"Check the status of a existing proving session","description":"Check the status of a existing proving session\n\nLook up the status of a session and if the session is successful\nfetches the receipt URL to download the final receipt.","operationId":"route_session_status","parameters":[{"name":"session_uuid","in":"path","description":"Session UUID","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Information about the running status and optionally the prover receipt download URL if session completed successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SessionStatus"}}}},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/snark/create":{"post":{"tags":["snark"],"summary":"Convert a STARK session ID to a SNARK proof","description":"Convert a STARK session ID to a SNARK proof\n\nUses the RISC Zero STARK2SNARK proving system to generate a snark proof of a\ngiven, successful session ID.","operationId":"route_snark_create","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SnarkCreate"}}},"required":true},"responses":{"200":{"description":"Creates a snark proof, returning the snark session UUID","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SnarkCreateResponse"}}}},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/snark/status/{snark_uuid}":{"get":{"tags":["snark"],"summary":"Check the status of a SNARK proving session","description":"Check the status of a SNARK proving session\n\nLooks up the status and optionally the proof output data of STARK2SNARK\nsession by ID","operationId":"route_snark_status","parameters":[{"name":"snark_uuid","in":"path","description":"Snark Request UUID","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Check the status of a existing proof UUID or fetch the completed final proof","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SnarkStatus"}}}},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/user/quotas":{"get":{"tags":["user"],"summary":"Fetch your API keys current quotas","description":"Fetch your API keys current quotas\n\nLooks up your user quotas for your currently active API key","operationId":"route_user_quota","responses":{"200":{"description":"Current user quota data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Quotas"}}}},"500":{"description":"Internal Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestError"}}}}},"security":[{"api_key":[]}]}},"/version":{"get":{"tags":["version"],"summary":"Return supported versions of Bonsai sub-components","description":"Return supported versions of Bonsai sub-components","operationId":"route_version_data","responses":{"200":{"description":"Provides the current version of all the supported subcomponents of Bonsai like the risc0-zkvm","content":{"application/json":{"schema":{"$ref":"#/components/schemas/VersionData"}}}}},"security":[{"api_key":[]}]}}},"components":{"schemas":{"Groth16Seal":{"type":"object","description":"Snark Seal object\n\nraw SNARK seal / proof data and outputs from snarkjs [soliditycalldata](https://github.com/iden3/snarkjs#26-simulate-a-verification-call)","required":["a","b","c","public"],"properties":{"a":{"type":"array","items":{"type":"string","format":"binary"},"description":"Proof 'a' value"},"b":{"type":"array","items":{"type":"array","items":{"type":"string","format":"binary"}},"description":"Proof 'b' value"},"c":{"type":"array","items":{"type":"string","format":"binary"},"description":"Proof 'c' value"},"public":{"type":"array","items":{"type":"string","format":"binary"},"description":"Proof public outputs"}}},"ImageUpload":{"type":"object","description":"upload endpoint responses containing upload URLs","required":["url"],"properties":{"url":{"type":"string","description":"Pre-Signed URL that accepts PUT requests to upload files"}}},"InputUpload":{"type":"object","description":"upload endpoint responses containing upload URLs and UUID","required":["uuid","url"],"properties":{"url":{"type":"string","description":"Pre-Signed URL that accepts PUT requests to upload files"},"uuid":{"type":"string","description":"UUID representing the uploaded object","example":"7c883297-303d-4c7a-aa84-855d36c5c215"}}},"Quotas":{"type":"object","description":"User quota and usage fields","required":["exec_cycle_limit","max_parallelism","concurrent_proofs","cycle_budget","cycle_usage"],"properties":{"concurrent_proofs":{"type":"integer","format":"int64","description":"Max concurrent proofs","minimum":0},"cycle_budget":{"type":"integer","format":"int64","description":"Current cycle budget remaining","minimum":0},"cycle_usage":{"type":"integer","format":"int64","description":"Lifetime cycles used","minimum":0},"exec_cycle_limit":{"type":"integer","format":"int64","description":"Executor cycle limit, in millions of cycles","minimum":0},"max_parallelism":{"type":"integer","format":"int64","description":"Max parallel proving units","minimum":0}}},"RestError":{"oneOf":[{"type":"object","required":["ServerErr"],"properties":{"ServerErr":{"type":"string","description":"Failed due to a server side error"}},"example":"Internal Server Error"}],"description":"REST api error classes"},"SessionCreate":{"type":"object","description":"Arguments to create a new proving session","required":["img","input"],"properties":{"img":{"type":"string","description":"uploaded ImageId"},"input":{"type":"string","description":"Input UUID for uploaded input"}}},"SessionCreateResponse":{"type":"object","description":"Session creation response","required":["uuid"],"properties":{"uuid":{"type":"string","description":"Generated UUID for the session"}}},"SessionStatus":{"type":"object","description":"Proving session status information","required":["status"],"properties":{"error_msg":{"type":"string","description":"If the status is FAILED, this is the error message from the workflow","nullable":true},"receipt_url":{"type":"string","description":"URL to download (http GET) the receipt","nullable":true},"state":{"type":"string","description":"Last reported active state that the execution was in.","nullable":true},"status":{"type":"string","description":"Proving workflow status\n\nPotential values: [RUNNING | SUCCEEDED | FAILED | TIMED_OUT | ABORTED]"}}},"SnarkCreate":{"type":"object","description":"STARK to SNARK conversion input data","required":["session_id"],"properties":{"session_id":{"type":"string","description":"Proof Session UUID"}}},"SnarkCreateResponse":{"type":"object","description":"Snark proof session creation response","required":["uuid"],"properties":{"uuid":{"type":"string","description":"Snark Session UUID"}}},"SnarkReceipt":{"type":"object","description":"Snark Receipt object\n\nAll relevant data to verify both the snark proof an corresponding imageId on\nchain.","required":["snark","post_state_digest","journal"],"properties":{"journal":{"type":"string","format":"binary","description":"Journal data from the risc-zkvm Receipt object"},"post_state_digest":{"type":"string","format":"binary","description":"Post State Digest\n\nCollected from the STARK proof via\n`receipt.get_metadata().post.digest()`"},"snark":{"$ref":"#/components/schemas/Groth16Seal"}}},"SnarkStatus":{"type":"object","description":"SNARK proving session status","required":["status"],"properties":{"output":{"allOf":[{"$ref":"#/components/schemas/SnarkReceipt"}],"nullable":true},"status":{"type":"string","description":"SNARK proving workflow status\n\nPotential values: [RUNNING | SUCCEEDED | FAILED | TIMED_OUT | ABORTED]"}}},"VersionInfo":{"type":"object","description":"Response containing all the supported components respective versions","required":["risc0_zkvm"],"properties":{"risc0_zkvm":{"type":"array","items":{"type":"string"},"description":"Supported versions of the zkvm"}}}},"securitySchemes":{"api_key":{"type":"apiKey","in":"header","name":"x-api-key"}}}}
